<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true">
    <appender name="STDERR" class="ch.qos.logback.core.ConsoleAppender">
        <target>System.err</target>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>WARN</level>
        </filter>
        <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder" >
            <providers>
                <mdc><includeMdcKeyName>traceId</includeMdcKeyName></mdc>
                <pattern>
                    <pattern>
                        {
                        "timestamp":"%date{ISO8601}",
                        "level":"%level",
                        "logger":"%logger",
                        "thread":"%thread",
                        "msg":"%msg"
                        }
                    </pattern>
                </pattern>
                <arguments/>
                <stackTrace/>
            </providers>
        </encoder>
    </appender>

    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <target>System.out</target>
        <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder" >
            <providers>
                <mdc><includeMdcKeyName>traceId</includeMdcKeyName></mdc>
                <pattern>
                    <pattern>
                        {
                        "timestamp":"%date{ISO8601}",
                        "level":"%level",
                        "logger":"%logger",
                        "thread":"%thread",
                        "msg":"%msg"
                        }
                    </pattern>
                </pattern>
                <arguments/>
                <stackTrace/>
            </providers>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
        </filter>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
        </filter>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>TRACE</level>
            <onMatch>ACCEPT</onMatch>
        </filter>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>WARN</level>
            <onMatch>DENY</onMatch>
        </filter>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>DENY</onMatch>
        </filter>
    </appender>

    <appender name="ERRORFILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>../logs/error/objectionable-content-error.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>../logs/error/pm-error_%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>5MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- keep 30 days' worth of history -->
            <maxHistory>15</maxHistory>
        </rollingPolicy>
        <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder" >
            <providers>
                <mdc><includeMdcKeyName>traceId</includeMdcKeyName></mdc>
                <tags/>
                <pattern>
                    <pattern>
                        {
                        "timestamp":"%date{ISO8601}",
                        "level":"%level",
                        "logger":"%logger",
                        "thread":"%thread",
                        "msg":"%msg"
                        }
                    </pattern>
                </pattern>
                <arguments/>
                <stackTrace/>
            </providers>
        </encoder>

        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>../logs/info/objectionable-content-info.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- daily rollover. Make sure the path matches the one in the file element or else
             the rollover logs are placed in the working directory. -->
            <fileNamePattern>../logs/info/pm-info_%d{yyyy-MM-dd}.%i.log</fileNamePattern>

            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>5MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- keep 30 days' worth of history -->
            <maxHistory>15</maxHistory>
        </rollingPolicy>

        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>DENY</onMatch>
        </filter>

        <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder" >
            <providers>
                <mdc><includeMdcKeyName>traceId</includeMdcKeyName></mdc>
                <pattern>
                    <pattern>
                        {
                        "timestamp":"%date{ISO8601}",
                        "level":"%level",
                        "logger":"%logger",
                        "thread":"%thread",
                        "msg":"%msg"
                        }
                    </pattern>
                </pattern>
                <arguments/>
                <stackTrace/>
            </providers>
        </encoder>
    </appender>


    <!-- Metrics File -->
    <appender name="METRICSFILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>../logs/metrics/objectionable-content-metrics.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- daily rollover. Make sure the path matches the one in the file element or else
             the rollover logs are placed in the working directory. -->
            <fileNamePattern>../logs/metrics/pm-metrics_%d{yyyy-MM-dd}.%i.log</fileNamePattern>

            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>5MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- keep 30 days' worth of history -->
            <maxHistory>15</maxHistory>
        </rollingPolicy>
        <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder" >
            <providers>
                <mdc><includeMdcKeyName>traceId</includeMdcKeyName></mdc>
                <pattern>
                    <pattern>
                        {
                        "timestamp":"%date{ISO8601}",
                        "level":"%level",
                        "logger":"%logger",
                        "thread":"%thread",
                        "msg":"%msg"
                        }
                    </pattern>
                </pattern>
                <arguments/>
                <stackTrace/>
            </providers>
        </encoder>
    </appender>

    <appender name="ASYNCFILE" class="ch.qos.logback.classic.AsyncAppender">
        <queueSize>500</queueSize>
        <discardingThreshold>0</discardingThreshold>
        <appender-ref ref="FILE"/>
    </appender>

    <appender name="ASYNCSTDOUT" class="ch.qos.logback.classic.AsyncAppender">
        <queueSize>500</queueSize>
        <discardingThreshold>0</discardingThreshold>
        <appender-ref ref="STDOUT"/>
    </appender>

    <logger name="com.target" level="WARN" additivity="false">
        <appender-ref ref="ERRORFILE"/>
        <appender-ref ref="STDERR"/>
    </logger>

    <logger name="com.target" level="DEBUG" additivity="false">
        <appender-ref ref="ASYNCFILE"/>
        <appender-ref ref="STDOUT"/>
    </logger>

    <root level="INFO">
        <appender-ref ref="STDOUT"/>
    </root>

</configuration>
